{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "import statsmodels.api as sm\n",
    "from collections import Counter\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"data/presidential_2012_votes.csv\")\n",
    "df1 = pd.read_csv(\"data/presidential_2016_votes.csv\")\n",
    "df2 = pd.read_csv(\"data/demographic_data.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>state</th>\n",
       "      <th>st</th>\n",
       "      <th>county</th>\n",
       "      <th>FIPS</th>\n",
       "      <th>candidate</th>\n",
       "      <th>party</th>\n",
       "      <th>candidatevotes</th>\n",
       "      <th>totalvotes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Autauga</td>\n",
       "      <td>1001</td>\n",
       "      <td>Barack Obama</td>\n",
       "      <td>democrat</td>\n",
       "      <td>6363.0</td>\n",
       "      <td>23932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Autauga</td>\n",
       "      <td>1001</td>\n",
       "      <td>Mitt Romney</td>\n",
       "      <td>republican</td>\n",
       "      <td>17379.0</td>\n",
       "      <td>23932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Autauga</td>\n",
       "      <td>1001</td>\n",
       "      <td>Other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>190.0</td>\n",
       "      <td>23932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Baldwin</td>\n",
       "      <td>1003</td>\n",
       "      <td>Barack Obama</td>\n",
       "      <td>democrat</td>\n",
       "      <td>18424.0</td>\n",
       "      <td>85338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Baldwin</td>\n",
       "      <td>1003</td>\n",
       "      <td>Mitt Romney</td>\n",
       "      <td>republican</td>\n",
       "      <td>66016.0</td>\n",
       "      <td>85338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9457</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>AK</td>\n",
       "      <td>District 39</td>\n",
       "      <td>2039</td>\n",
       "      <td>Mitt Romney</td>\n",
       "      <td>republican</td>\n",
       "      <td>2566.0</td>\n",
       "      <td>6560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9458</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>AK</td>\n",
       "      <td>District 39</td>\n",
       "      <td>2039</td>\n",
       "      <td>Other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>349.0</td>\n",
       "      <td>6560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9459</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>AK</td>\n",
       "      <td>District 40</td>\n",
       "      <td>2040</td>\n",
       "      <td>Barack Obama</td>\n",
       "      <td>democrat</td>\n",
       "      <td>2717.0</td>\n",
       "      <td>4235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9460</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>AK</td>\n",
       "      <td>District 40</td>\n",
       "      <td>2040</td>\n",
       "      <td>Mitt Romney</td>\n",
       "      <td>republican</td>\n",
       "      <td>1347.0</td>\n",
       "      <td>4235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9461</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>AK</td>\n",
       "      <td>District 40</td>\n",
       "      <td>2040</td>\n",
       "      <td>Other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>171.0</td>\n",
       "      <td>4235</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9462 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      year    state  st       county  FIPS     candidate       party  \\\n",
       "0     2012  Alabama  AL      Autauga  1001  Barack Obama    democrat   \n",
       "1     2012  Alabama  AL      Autauga  1001   Mitt Romney  republican   \n",
       "2     2012  Alabama  AL      Autauga  1001         Other         NaN   \n",
       "3     2012  Alabama  AL      Baldwin  1003  Barack Obama    democrat   \n",
       "4     2012  Alabama  AL      Baldwin  1003   Mitt Romney  republican   \n",
       "...    ...      ...  ..          ...   ...           ...         ...   \n",
       "9457  2012   Alaska  AK  District 39  2039   Mitt Romney  republican   \n",
       "9458  2012   Alaska  AK  District 39  2039         Other         NaN   \n",
       "9459  2012   Alaska  AK  District 40  2040  Barack Obama    democrat   \n",
       "9460  2012   Alaska  AK  District 40  2040   Mitt Romney  republican   \n",
       "9461  2012   Alaska  AK  District 40  2040         Other         NaN   \n",
       "\n",
       "      candidatevotes  totalvotes  \n",
       "0             6363.0       23932  \n",
       "1            17379.0       23932  \n",
       "2              190.0       23932  \n",
       "3            18424.0       85338  \n",
       "4            66016.0       85338  \n",
       "...              ...         ...  \n",
       "9457          2566.0        6560  \n",
       "9458           349.0        6560  \n",
       "9459          2717.0        4235  \n",
       "9460          1347.0        4235  \n",
       "9461           171.0        4235  \n",
       "\n",
       "[9462 rows x 9 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>state</th>\n",
       "      <th>st</th>\n",
       "      <th>county</th>\n",
       "      <th>FIPS</th>\n",
       "      <th>candidate</th>\n",
       "      <th>party</th>\n",
       "      <th>candidatevotes</th>\n",
       "      <th>totalvotes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Autauga</td>\n",
       "      <td>1001</td>\n",
       "      <td>Barack Obama</td>\n",
       "      <td>democrat</td>\n",
       "      <td>6363.0</td>\n",
       "      <td>23932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Autauga</td>\n",
       "      <td>1001</td>\n",
       "      <td>Mitt Romney</td>\n",
       "      <td>republican</td>\n",
       "      <td>17379.0</td>\n",
       "      <td>23932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Autauga</td>\n",
       "      <td>1001</td>\n",
       "      <td>Other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>190.0</td>\n",
       "      <td>23932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Baldwin</td>\n",
       "      <td>1003</td>\n",
       "      <td>Barack Obama</td>\n",
       "      <td>democrat</td>\n",
       "      <td>18424.0</td>\n",
       "      <td>85338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Baldwin</td>\n",
       "      <td>1003</td>\n",
       "      <td>Mitt Romney</td>\n",
       "      <td>republican</td>\n",
       "      <td>66016.0</td>\n",
       "      <td>85338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9457</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>AK</td>\n",
       "      <td>District 39</td>\n",
       "      <td>2039</td>\n",
       "      <td>Mitt Romney</td>\n",
       "      <td>republican</td>\n",
       "      <td>2566.0</td>\n",
       "      <td>6560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9458</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>AK</td>\n",
       "      <td>District 39</td>\n",
       "      <td>2039</td>\n",
       "      <td>Other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>349.0</td>\n",
       "      <td>6560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9459</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>AK</td>\n",
       "      <td>District 40</td>\n",
       "      <td>2040</td>\n",
       "      <td>Barack Obama</td>\n",
       "      <td>democrat</td>\n",
       "      <td>2717.0</td>\n",
       "      <td>4235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9460</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>AK</td>\n",
       "      <td>District 40</td>\n",
       "      <td>2040</td>\n",
       "      <td>Mitt Romney</td>\n",
       "      <td>republican</td>\n",
       "      <td>1347.0</td>\n",
       "      <td>4235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9461</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alaska</td>\n",
       "      <td>AK</td>\n",
       "      <td>District 40</td>\n",
       "      <td>2040</td>\n",
       "      <td>Other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>171.0</td>\n",
       "      <td>4235</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9462 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      year    state  st       county  FIPS     candidate       party  \\\n",
       "0     2012  Alabama  AL      Autauga  1001  Barack Obama    democrat   \n",
       "1     2012  Alabama  AL      Autauga  1001   Mitt Romney  republican   \n",
       "2     2012  Alabama  AL      Autauga  1001         Other         NaN   \n",
       "3     2012  Alabama  AL      Baldwin  1003  Barack Obama    democrat   \n",
       "4     2012  Alabama  AL      Baldwin  1003   Mitt Romney  republican   \n",
       "...    ...      ...  ..          ...   ...           ...         ...   \n",
       "9457  2012   Alaska  AK  District 39  2039   Mitt Romney  republican   \n",
       "9458  2012   Alaska  AK  District 39  2039         Other         NaN   \n",
       "9459  2012   Alaska  AK  District 40  2040  Barack Obama    democrat   \n",
       "9460  2012   Alaska  AK  District 40  2040   Mitt Romney  republican   \n",
       "9461  2012   Alaska  AK  District 40  2040         Other         NaN   \n",
       "\n",
       "      candidatevotes  totalvotes  \n",
       "0             6363.0       23932  \n",
       "1            17379.0       23932  \n",
       "2              190.0       23932  \n",
       "3            18424.0       85338  \n",
       "4            66016.0       85338  \n",
       "...              ...         ...  \n",
       "9457          2566.0        6560  \n",
       "9458           349.0        6560  \n",
       "9459          2717.0        4235  \n",
       "9460          1347.0        4235  \n",
       "9461           171.0        4235  \n",
       "\n",
       "[9462 rows x 9 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Part 1: EDA\n",
    "#1.\n",
    "np.shape(df)  #9462 rows, 9 colm\n",
    "np.shape(df1) #9462 rows, 9 colm\n",
    "np.shape(df2) #3114 rows, 21 colm\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>state</th>\n",
       "      <th>st</th>\n",
       "      <th>county</th>\n",
       "      <th>FIPS</th>\n",
       "      <th>candidate</th>\n",
       "      <th>party</th>\n",
       "      <th>candidatevotes</th>\n",
       "      <th>totalvotes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Autauga</td>\n",
       "      <td>1001</td>\n",
       "      <td>Barack Obama</td>\n",
       "      <td>democrat</td>\n",
       "      <td>6363.0</td>\n",
       "      <td>23932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Autauga</td>\n",
       "      <td>1001</td>\n",
       "      <td>Mitt Romney</td>\n",
       "      <td>republican</td>\n",
       "      <td>17379.0</td>\n",
       "      <td>23932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Autauga</td>\n",
       "      <td>1001</td>\n",
       "      <td>Other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>190.0</td>\n",
       "      <td>23932</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Baldwin</td>\n",
       "      <td>1003</td>\n",
       "      <td>Barack Obama</td>\n",
       "      <td>democrat</td>\n",
       "      <td>18424.0</td>\n",
       "      <td>85338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Baldwin</td>\n",
       "      <td>1003</td>\n",
       "      <td>Mitt Romney</td>\n",
       "      <td>republican</td>\n",
       "      <td>66016.0</td>\n",
       "      <td>85338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Baldwin</td>\n",
       "      <td>1003</td>\n",
       "      <td>Other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>898.0</td>\n",
       "      <td>85338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Barbour</td>\n",
       "      <td>1005</td>\n",
       "      <td>Barack Obama</td>\n",
       "      <td>democrat</td>\n",
       "      <td>5912.0</td>\n",
       "      <td>11509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Barbour</td>\n",
       "      <td>1005</td>\n",
       "      <td>Mitt Romney</td>\n",
       "      <td>republican</td>\n",
       "      <td>5550.0</td>\n",
       "      <td>11509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Barbour</td>\n",
       "      <td>1005</td>\n",
       "      <td>Other</td>\n",
       "      <td>NaN</td>\n",
       "      <td>47.0</td>\n",
       "      <td>11509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2012</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Bibb</td>\n",
       "      <td>1007</td>\n",
       "      <td>Barack Obama</td>\n",
       "      <td>democrat</td>\n",
       "      <td>2202.0</td>\n",
       "      <td>8420</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   year    state  st   county  FIPS     candidate       party  candidatevotes  \\\n",
       "0  2012  Alabama  AL  Autauga  1001  Barack Obama    democrat          6363.0   \n",
       "1  2012  Alabama  AL  Autauga  1001   Mitt Romney  republican         17379.0   \n",
       "2  2012  Alabama  AL  Autauga  1001         Other         NaN           190.0   \n",
       "3  2012  Alabama  AL  Baldwin  1003  Barack Obama    democrat         18424.0   \n",
       "4  2012  Alabama  AL  Baldwin  1003   Mitt Romney  republican         66016.0   \n",
       "5  2012  Alabama  AL  Baldwin  1003         Other         NaN           898.0   \n",
       "6  2012  Alabama  AL  Barbour  1005  Barack Obama    democrat          5912.0   \n",
       "7  2012  Alabama  AL  Barbour  1005   Mitt Romney  republican          5550.0   \n",
       "8  2012  Alabama  AL  Barbour  1005         Other         NaN            47.0   \n",
       "9  2012  Alabama  AL     Bibb  1007  Barack Obama    democrat          2202.0   \n",
       "\n",
       "   totalvotes  \n",
       "0       23932  \n",
       "1       23932  \n",
       "2       23932  \n",
       "3       85338  \n",
       "4       85338  \n",
       "5       85338  \n",
       "6       11509  \n",
       "7       11509  \n",
       "8       11509  \n",
       "9        8420  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2.\n",
    "df.head(10)\n",
    "#FIPS: is the column labeling the county so that the data becomes easily accessible and organized. We need this when we want to analysize votes, as it shows ur who is voting where - numeric\n",
    "#Canidate: Shows which politician is getting the votes in a county. Helps us measure how diffrent people behave in different places - Catergorical\n",
    "#Year: Allows future generations to analyse the data based on the year. It helps give a histrocial setting - numeric\n",
    "#TotalVotes: Helpes us measure the percent vote a canidate has received - numeric\n",
    "#CanidateVotes: How mnay votes a politician has received in a county - numeric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>state</th>\n",
       "      <th>st</th>\n",
       "      <th>county</th>\n",
       "      <th>FIPS</th>\n",
       "      <th>total_population</th>\n",
       "      <th>citizen_voting_age_population</th>\n",
       "      <th>white_pct</th>\n",
       "      <th>black_pct</th>\n",
       "      <th>hispanic_pct</th>\n",
       "      <th>black_and_hispanic_pct</th>\n",
       "      <th>...</th>\n",
       "      <th>foreign_born_pct</th>\n",
       "      <th>female_pct</th>\n",
       "      <th>caucasian_frac</th>\n",
       "      <th>age_29_and_under_pct</th>\n",
       "      <th>age_65_and_older_pct</th>\n",
       "      <th>median_household_income</th>\n",
       "      <th>unemployed_pct_in_civilian_labor_force</th>\n",
       "      <th>less_than_highschool_pct</th>\n",
       "      <th>less_than_college_pct</th>\n",
       "      <th>rural population_pct</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Autauga</td>\n",
       "      <td>1001</td>\n",
       "      <td>55049.0</td>\n",
       "      <td>40690.0</td>\n",
       "      <td>75.683482</td>\n",
       "      <td>18.370906</td>\n",
       "      <td>2.572254</td>\n",
       "      <td>20.943160</td>\n",
       "      <td>...</td>\n",
       "      <td>1.838362</td>\n",
       "      <td>51.176225</td>\n",
       "      <td>0.76</td>\n",
       "      <td>40.037058</td>\n",
       "      <td>13.978456</td>\n",
       "      <td>53099.0</td>\n",
       "      <td>5.591657</td>\n",
       "      <td>12.417046</td>\n",
       "      <td>75.407229</td>\n",
       "      <td>42.002162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Baldwin</td>\n",
       "      <td>1003</td>\n",
       "      <td>199510.0</td>\n",
       "      <td>151770.0</td>\n",
       "      <td>83.178788</td>\n",
       "      <td>9.225603</td>\n",
       "      <td>4.366698</td>\n",
       "      <td>13.592301</td>\n",
       "      <td>...</td>\n",
       "      <td>3.269510</td>\n",
       "      <td>51.194928</td>\n",
       "      <td>0.83</td>\n",
       "      <td>35.474412</td>\n",
       "      <td>18.714851</td>\n",
       "      <td>51365.0</td>\n",
       "      <td>6.286843</td>\n",
       "      <td>9.972418</td>\n",
       "      <td>70.452889</td>\n",
       "      <td>42.279099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Barbour</td>\n",
       "      <td>1005</td>\n",
       "      <td>26614.0</td>\n",
       "      <td>20375.0</td>\n",
       "      <td>45.885624</td>\n",
       "      <td>47.888329</td>\n",
       "      <td>4.309762</td>\n",
       "      <td>52.198091</td>\n",
       "      <td>...</td>\n",
       "      <td>2.859397</td>\n",
       "      <td>46.498084</td>\n",
       "      <td>0.46</td>\n",
       "      <td>37.664387</td>\n",
       "      <td>16.528895</td>\n",
       "      <td>33956.0</td>\n",
       "      <td>12.824738</td>\n",
       "      <td>26.235928</td>\n",
       "      <td>87.132213</td>\n",
       "      <td>67.789635</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Bibb</td>\n",
       "      <td>1007</td>\n",
       "      <td>22572.0</td>\n",
       "      <td>17590.0</td>\n",
       "      <td>74.765196</td>\n",
       "      <td>21.212121</td>\n",
       "      <td>2.223994</td>\n",
       "      <td>23.436116</td>\n",
       "      <td>...</td>\n",
       "      <td>1.351232</td>\n",
       "      <td>46.464646</td>\n",
       "      <td>0.75</td>\n",
       "      <td>37.329435</td>\n",
       "      <td>14.885699</td>\n",
       "      <td>39776.0</td>\n",
       "      <td>7.146827</td>\n",
       "      <td>19.301587</td>\n",
       "      <td>88.000000</td>\n",
       "      <td>68.352607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Blount</td>\n",
       "      <td>1009</td>\n",
       "      <td>57704.0</td>\n",
       "      <td>42430.0</td>\n",
       "      <td>87.657701</td>\n",
       "      <td>1.557951</td>\n",
       "      <td>8.727298</td>\n",
       "      <td>10.285249</td>\n",
       "      <td>...</td>\n",
       "      <td>4.271801</td>\n",
       "      <td>50.485235</td>\n",
       "      <td>0.88</td>\n",
       "      <td>37.240053</td>\n",
       "      <td>17.192916</td>\n",
       "      <td>46212.0</td>\n",
       "      <td>5.953833</td>\n",
       "      <td>19.968585</td>\n",
       "      <td>86.950243</td>\n",
       "      <td>89.951502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Bullock</td>\n",
       "      <td>1011</td>\n",
       "      <td>10552.0</td>\n",
       "      <td>8195.0</td>\n",
       "      <td>21.683093</td>\n",
       "      <td>75.502274</td>\n",
       "      <td>0.123199</td>\n",
       "      <td>75.625474</td>\n",
       "      <td>...</td>\n",
       "      <td>1.516300</td>\n",
       "      <td>45.801744</td>\n",
       "      <td>0.22</td>\n",
       "      <td>37.935936</td>\n",
       "      <td>15.134572</td>\n",
       "      <td>29335.0</td>\n",
       "      <td>13.258520</td>\n",
       "      <td>33.437884</td>\n",
       "      <td>89.744988</td>\n",
       "      <td>51.374382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Butler</td>\n",
       "      <td>1013</td>\n",
       "      <td>20280.0</td>\n",
       "      <td>15425.0</td>\n",
       "      <td>52.781065</td>\n",
       "      <td>43.515779</td>\n",
       "      <td>1.247535</td>\n",
       "      <td>44.763314</td>\n",
       "      <td>...</td>\n",
       "      <td>1.395464</td>\n",
       "      <td>53.047337</td>\n",
       "      <td>0.53</td>\n",
       "      <td>37.056213</td>\n",
       "      <td>18.126233</td>\n",
       "      <td>34315.0</td>\n",
       "      <td>9.804827</td>\n",
       "      <td>18.940426</td>\n",
       "      <td>83.919994</td>\n",
       "      <td>71.232157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Calhoun</td>\n",
       "      <td>1015</td>\n",
       "      <td>115883.0</td>\n",
       "      <td>88525.0</td>\n",
       "      <td>72.997765</td>\n",
       "      <td>20.331714</td>\n",
       "      <td>3.436224</td>\n",
       "      <td>23.767938</td>\n",
       "      <td>...</td>\n",
       "      <td>2.393794</td>\n",
       "      <td>51.898035</td>\n",
       "      <td>0.73</td>\n",
       "      <td>38.783083</td>\n",
       "      <td>15.930723</td>\n",
       "      <td>41954.0</td>\n",
       "      <td>11.681822</td>\n",
       "      <td>17.663137</td>\n",
       "      <td>82.347033</td>\n",
       "      <td>33.696826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Chambers</td>\n",
       "      <td>1017</td>\n",
       "      <td>34018.0</td>\n",
       "      <td>26480.0</td>\n",
       "      <td>56.743489</td>\n",
       "      <td>40.478570</td>\n",
       "      <td>0.435064</td>\n",
       "      <td>40.913634</td>\n",
       "      <td>...</td>\n",
       "      <td>0.990652</td>\n",
       "      <td>52.087130</td>\n",
       "      <td>0.57</td>\n",
       "      <td>35.872185</td>\n",
       "      <td>18.387324</td>\n",
       "      <td>36027.0</td>\n",
       "      <td>7.489945</td>\n",
       "      <td>19.736732</td>\n",
       "      <td>87.515721</td>\n",
       "      <td>49.148034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>AL</td>\n",
       "      <td>Cherokee</td>\n",
       "      <td>1019</td>\n",
       "      <td>25897.0</td>\n",
       "      <td>20505.0</td>\n",
       "      <td>91.871645</td>\n",
       "      <td>4.606711</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.170599</td>\n",
       "      <td>...</td>\n",
       "      <td>0.725953</td>\n",
       "      <td>50.252925</td>\n",
       "      <td>0.92</td>\n",
       "      <td>32.710353</td>\n",
       "      <td>20.322817</td>\n",
       "      <td>38925.0</td>\n",
       "      <td>5.855731</td>\n",
       "      <td>18.717235</td>\n",
       "      <td>86.038301</td>\n",
       "      <td>85.736273</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     state  st    county  FIPS  total_population  \\\n",
       "0  Alabama  AL   Autauga  1001           55049.0   \n",
       "1  Alabama  AL   Baldwin  1003          199510.0   \n",
       "2  Alabama  AL   Barbour  1005           26614.0   \n",
       "3  Alabama  AL      Bibb  1007           22572.0   \n",
       "4  Alabama  AL    Blount  1009           57704.0   \n",
       "5  Alabama  AL   Bullock  1011           10552.0   \n",
       "6  Alabama  AL    Butler  1013           20280.0   \n",
       "7  Alabama  AL   Calhoun  1015          115883.0   \n",
       "8  Alabama  AL  Chambers  1017           34018.0   \n",
       "9  Alabama  AL  Cherokee  1019           25897.0   \n",
       "\n",
       "   citizen_voting_age_population  white_pct  black_pct  hispanic_pct  \\\n",
       "0                        40690.0  75.683482  18.370906      2.572254   \n",
       "1                       151770.0  83.178788   9.225603      4.366698   \n",
       "2                        20375.0  45.885624  47.888329      4.309762   \n",
       "3                        17590.0  74.765196  21.212121      2.223994   \n",
       "4                        42430.0  87.657701   1.557951      8.727298   \n",
       "5                         8195.0  21.683093  75.502274      0.123199   \n",
       "6                        15425.0  52.781065  43.515779      1.247535   \n",
       "7                        88525.0  72.997765  20.331714      3.436224   \n",
       "8                        26480.0  56.743489  40.478570      0.435064   \n",
       "9                        20505.0  91.871645   4.606711           NaN   \n",
       "\n",
       "   black_and_hispanic_pct  ...  foreign_born_pct  female_pct  caucasian_frac  \\\n",
       "0               20.943160  ...          1.838362   51.176225            0.76   \n",
       "1               13.592301  ...          3.269510   51.194928            0.83   \n",
       "2               52.198091  ...          2.859397   46.498084            0.46   \n",
       "3               23.436116  ...          1.351232   46.464646            0.75   \n",
       "4               10.285249  ...          4.271801   50.485235            0.88   \n",
       "5               75.625474  ...          1.516300   45.801744            0.22   \n",
       "6               44.763314  ...          1.395464   53.047337            0.53   \n",
       "7               23.767938  ...          2.393794   51.898035            0.73   \n",
       "8               40.913634  ...          0.990652   52.087130            0.57   \n",
       "9                6.170599  ...          0.725953   50.252925            0.92   \n",
       "\n",
       "   age_29_and_under_pct  age_65_and_older_pct  median_household_income  \\\n",
       "0             40.037058             13.978456                  53099.0   \n",
       "1             35.474412             18.714851                  51365.0   \n",
       "2             37.664387             16.528895                  33956.0   \n",
       "3             37.329435             14.885699                  39776.0   \n",
       "4             37.240053             17.192916                  46212.0   \n",
       "5             37.935936             15.134572                  29335.0   \n",
       "6             37.056213             18.126233                  34315.0   \n",
       "7             38.783083             15.930723                  41954.0   \n",
       "8             35.872185             18.387324                  36027.0   \n",
       "9             32.710353             20.322817                  38925.0   \n",
       "\n",
       "   unemployed_pct_in_civilian_labor_force  less_than_highschool_pct  \\\n",
       "0                                5.591657                 12.417046   \n",
       "1                                6.286843                  9.972418   \n",
       "2                               12.824738                 26.235928   \n",
       "3                                7.146827                 19.301587   \n",
       "4                                5.953833                 19.968585   \n",
       "5                               13.258520                 33.437884   \n",
       "6                                9.804827                 18.940426   \n",
       "7                               11.681822                 17.663137   \n",
       "8                                7.489945                 19.736732   \n",
       "9                                5.855731                 18.717235   \n",
       "\n",
       "   less_than_college_pct  rural population_pct  \n",
       "0              75.407229             42.002162  \n",
       "1              70.452889             42.279099  \n",
       "2              87.132213             67.789635  \n",
       "3              88.000000             68.352607  \n",
       "4              86.950243             89.951502  \n",
       "5              89.744988             51.374382  \n",
       "6              83.919994             71.232157  \n",
       "7              82.347033             33.696826  \n",
       "8              87.515721             49.148034  \n",
       "9              86.038301             85.736273  \n",
       "\n",
       "[10 rows x 21 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2.\n",
    "df2.head(10)\n",
    "#Total_population: Helps us analyse how big a county is, and lets us see if views are very similar in condensed popluations - numeric\n",
    "#White_pct: The race given the most priviledge in society. Lets us see how the canidates effect different races - numeric\n",
    "#Female_Pct: Allows us to view how gender effects votes - numeric\n",
    "#Foreign_born_pct: Allows us to question whether imigrants hold diiferent views than other born citizens - numeric\n",
    "#Median_household_income: How do the middle class vote in relation to other poeple of different social and econiomic status - numeric"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "year              0.0\n",
       "state             0.0\n",
       "county            0.0\n",
       "FIPS              0.0\n",
       "candidate         0.0\n",
       "party             0.0\n",
       "candidatevotes    0.0\n",
       "totalvotes        0.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Part 2:Cleaning\n",
    "df.pop(\"st\") #- Same info as State column\n",
    "df1.pop(\"st\") #- Same info as State column\n",
    "df1['party'] = df1['party'].fillna(\"Mixed\") #- Change the null values to Mix in the Party column\n",
    "df['party'] = df['party'].fillna(\"Mixed\") #- Change the null values to Mix in the Party column\n",
    "df.isna().mean()*100 #- Check to see if there are anymore null vals\n",
    "df1.isna().mean()*100 #- Check to see if there are anymore null vals\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "state                                     0.0\n",
       "county                                    0.0\n",
       "FIPS                                      0.0\n",
       "total_population                          0.0\n",
       "citizen_voting_age_population             0.0\n",
       "white_pct                                 0.0\n",
       "black_pct                                 0.0\n",
       "hispanic_pct                              0.0\n",
       "black_and_hispanic_pct                    0.0\n",
       "nonwhite_pct                              0.0\n",
       "foreign_born_pct                          0.0\n",
       "female_pct                                0.0\n",
       "caucasian_frac                            0.0\n",
       "age_29_and_under_pct                      0.0\n",
       "age_65_and_older_pct                      0.0\n",
       "median_household_income                   0.0\n",
       "unemployed_pct_in_civilian_labor_force    0.0\n",
       "less_than_highschool_pct                  0.0\n",
       "less_than_college_pct                     0.0\n",
       "rural population_pct                      0.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.pop(\"st\")\n",
    "#This column is repetitive thus deleting is fine\n",
    "df2['hispanic_pct'].fillna(df2['black_and_hispanic_pct']-df2[\"black_pct\"], inplace=True )\n",
    "df2['black_pct'].fillna(df2['black_and_hispanic_pct']-df2[\"hispanic_pct\"], inplace=True )\n",
    "#I used this to determine the remaining poplution of the hispanic and black poeple by subtracting their total. \n",
    "df2['black_pct'] = df2['black_pct'].fillna(df2['black_pct'].mean())\n",
    "df2['hispanic_pct'] = df2['hispanic_pct'].fillna(df2['hispanic_pct'].mean())\n",
    "#We must also take into account the possibility that the total plus required race pct is missing, \n",
    "#hence we can add the average null filler after the previous command is finished\n",
    "df2['county'] = df2['county'].fillna(\"Not Specified\")\n",
    "#A small percent of counties were unnamed, intead of deleting them, we can name them \"Not specified\".\n",
    "\n",
    "#Generally, nulls with a percentage of 5 and above are usually needed to be dealth with in a proper manner, \n",
    "#but 2.4% is fairly close, hence we can deal with the citizen column as well\n",
    "# for citizen voting age pop, we can take the total population and divide it by voting age pop *100 to find the percentage. \n",
    "#We can use this percanteg to fill in all the null vals, by doing percent * total pop\n",
    "#This formula only works for columns that already have total popluation filled in, thus we can fill the nulls \n",
    "#for this column using the averge first\n",
    "df2['total_population'] = df2['total_population'].fillna(1.019768e+05)\n",
    "df2 = df2.assign(num=0)\n",
    "#creates a new temp column \n",
    "df2['num'] = df2['citizen_voting_age_population']/df2['total_population']\n",
    "df2['citizen_voting_age_population'].fillna(df2['total_population']*df2['num'].mean(),inplace=True)\n",
    "del df2['num']\n",
    "#deletes the column after use, as it is not needed\n",
    "\n",
    "#the remianing columns all have null percentages of 0.128452, which is very little thus ignorable. \n",
    "#Instead of keeping these null values, we can fill them in with the average as it will help keep the \n",
    "#data intergity (if columns are not deleted)\n",
    "df2['black_and_hispanic_pct'] = df2['black_and_hispanic_pct'].fillna(17.939017)\n",
    "df2['nonwhite_pct'] = df2['nonwhite_pct'].fillna(22.623601)\n",
    "df2['foreign_born_pct'] = df2['foreign_born_pct'].fillna(4.614669)\n",
    "df2['female_pct'] = df2['female_pct'].fillna(49.975212)\n",
    "df2['caucasian_frac'] = df2['caucasian_frac'].fillna(0.773756)\n",
    "df2['age_29_and_under_pct'] = df2['age_29_and_under_pct'].fillna(37.340978)\n",
    "df2['age_65_and_older_pct'] = df2['age_65_and_older_pct'].fillna(17.636371)\n",
    "df2['median_household_income'] = df2['median_household_income'].fillna(47809.562058)\n",
    "df2['unemployed_pct_in_civilian_labor_force'] = df2['unemployed_pct_in_civilian_labor_force'].fillna(7.063559)\n",
    "df2['less_than_highschool_pct'] = df2['less_than_highschool_pct'].fillna(14.226943)\n",
    "df2['less_than_college_pct'] = df2['less_than_college_pct'].fillna(79.227596)\n",
    "df2['rural population_pct'] = df2['rural population_pct'].fillna(58.489157)\n",
    "df2['white_pct'] = df2['white_pct'].fillna(77.376399)\n",
    "df2.isna().mean()*100 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = df1.assign(percent=np.nan)\n",
    "#Creates the columnn called percent\n",
    "for x in range(0,9462):\n",
    "    if df1.iloc[x, 5] == \"democrat\":\n",
    "         df1.at[x,'percent'] = (df1.iloc[x, 6]/(df1.iloc[x, 6] + df1.iloc[x+1, 6])*100)\n",
    "    elif df1.iloc[x, 5] == \"republican\":\n",
    "         df1.at[x,'percent'] = (df1.iloc[x, 6]/(df1.iloc[x, 6] + df1.iloc[x-1, 6])*100)\n",
    "#Gives the percent value for demo and repub, skips over the mixed party and leaves them as null"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.assign(percent=np.nan)\n",
    "#Creates the columnn called percent\n",
    "for x in range(0,9462):\n",
    "    if df.iloc[x, 5] == \"democrat\":\n",
    "         df.at[x,'percent'] = (df.iloc[x, 6]/(df.iloc[x, 6] + df.iloc[x+1, 6])*100)\n",
    "    elif df.iloc[x, 5] == \"republican\":\n",
    "         df.at[x,'percent'] = (df.iloc[x, 6]/(df.iloc[x, 6] + df.iloc[x-1, 6])*100)\n",
    "#Gives the percent value for demo and repub, skips over the mixed party and leaves them as null"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ritvik/opt/anaconda3/lib/python3.8/site-packages/seaborn/regression.py:580: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n",
      "  warnings.warn(msg, UserWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df12 = pd.merge(df, df2, on='FIPS', how='outer')\n",
    "df12O = df12[df12['candidate']=='Barack Obama']\n",
    "df12OA = df12O[df12O['state_x']=='Alabama']\n",
    "df12OAhead10 = df12OA.head(10)\n",
    "fig = sns.lmplot(x=\"county_x\", y='foreign_born_pct',data=df12OAhead10, fit_reg=False, size = 3, aspect = 2)\n",
    "fig.set_axis_labels('County', 'Votes')\n",
    "plt.title('Votes for Barack Obama in Alabama per County')\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df1Hil = df1[df1['candidate']=='Hillary Clinton']\n",
    "df1Hil1 = df1Hil[df1Hil['candidatevotes']>=650000]\n",
    "ddd = pd.merge(df1Hil1, df2, on='FIPS')\n",
    "plt.show()\n",
    "plt.bar(ddd[\"age_29_and_under_pct\"],ddd[\"totalvotes\"], color=\"orange\")\n",
    "plt.xlabel('Number of people age 29 and under')\n",
    "plt.ylabel('Votes')\n",
    "plt.title(\"   Votes for Hilary Based on Youth with Total > 650k\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ritvik/opt/anaconda3/lib/python3.8/site-packages/seaborn/categorical.py:1296: UserWarning: 85.6% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n",
      "  warnings.warn(msg, UserWarning)\n",
      "/Users/ritvik/opt/anaconda3/lib/python3.8/site-packages/seaborn/categorical.py:1296: UserWarning: 82.6% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n",
      "  warnings.warn(msg, UserWarning)\n",
      "/Users/ritvik/opt/anaconda3/lib/python3.8/site-packages/seaborn/categorical.py:1296: UserWarning: 93.4% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n",
      "  warnings.warn(msg, UserWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='candidate', ylabel='candidatevotes'>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df5555 = df1.head(500)\n",
    "sns.swarmplot(x=\"candidate\", y='candidatevotes',hue=\"party\", size=10, marker=\"D\", alpha=.7, palette='pastel', data=df5555)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df0000 = df1.head(3)\n",
    "df1111 = df1.loc[df1['county']==\"Baldwin\"]\n",
    "df1111 = df1111.loc[df1111['state']==\"Alabama\"]\n",
    "df2222 = df1.loc[df1['state']==\"Alabama\"]\n",
    "df2222 = df1.loc[df1['county']==\"Winston\"]\n",
    "df2222 = df2222.loc[df2222['state']==\"Alabama\"]\n",
    "df1111\n",
    "\n",
    "label = \"Hillary Clinton\",'Donald Trump', 'Other'\n",
    "colors1 = ['lightblue','lightsteelblue','silver']\n",
    "colors2 = ['lightblue','red','green']\n",
    "colors3 = ['silver','gold','brown']\n",
    "move = (0.1, 0.11, 0)\n",
    "\n",
    "plt.figure()\n",
    "plt.pie(df0000[\"candidatevotes\"],labels=label,autopct='%1.1f%%', startangle=15, shadow = True, colors=colors2, explode=move)\n",
    "plt.title('Canidate Vote Percenatge for Autauga, Alabama ')\n",
    "plt.axis('equal')\n",
    "plt.show()\n",
    "\n",
    "plt.figure()\n",
    "plt.pie(df1111[\"candidatevotes\"],labels=label,autopct='%1.1f%%', startangle=15, shadow = True, colors=colors1, explode=move)\n",
    "plt.title('Canidate Vote Percenatge for Baldwin, Alabama ')\n",
    "plt.axis('equal')\n",
    "plt.show()\n",
    "\n",
    "plt.figure()\n",
    "plt.pie(df2222[\"candidatevotes\"],labels=label,autopct='%1.1f%%', startangle=15, shadow = True, colors=colors3, explode=move)\n",
    "plt.title('Canidate Vote Percenatge for Winston, Alabama ')\n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>state</th>\n",
       "      <th>county</th>\n",
       "      <th>FIPS</th>\n",
       "      <th>candidate</th>\n",
       "      <th>party</th>\n",
       "      <th>candidatevotes</th>\n",
       "      <th>totalvotes</th>\n",
       "      <th>percent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2016</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>Baldwin</td>\n",
       "      <td>1003</td>\n",
       "      <td>Hillary Clinton</td>\n",
       "      <td>democrat</td>\n",
       "      <td>18458.0</td>\n",
       "      <td>95215</td>\n",
       "      <td>20.207793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2016</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>Baldwin</td>\n",
       "      <td>1003</td>\n",
       "      <td>Donald Trump</td>\n",
       "      <td>republican</td>\n",
       "      <td>72883.0</td>\n",
       "      <td>95215</td>\n",
       "      <td>79.792207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2016</td>\n",
       "      <td>Alabama</td>\n",
       "      <td>Baldwin</td>\n",
       "      <td>1003</td>\n",
       "      <td>Other</td>\n",
       "      <td>Mixed</td>\n",
       "      <td>3874.0</td>\n",
       "      <td>95215</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   year    state   county  FIPS        candidate       party  candidatevotes  \\\n",
       "3  2016  Alabama  Baldwin  1003  Hillary Clinton    democrat         18458.0   \n",
       "4  2016  Alabama  Baldwin  1003     Donald Trump  republican         72883.0   \n",
       "5  2016  Alabama  Baldwin  1003            Other       Mixed          3874.0   \n",
       "\n",
       "   totalvotes    percent  \n",
       "3       95215  20.207793  \n",
       "4       95215  79.792207  \n",
       "5       95215        NaN  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1111"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "for x in range(0,2):\n",
    "    print(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
